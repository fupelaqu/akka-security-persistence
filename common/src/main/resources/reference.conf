mustache {
  root{
    path = null
    path = ${?MUSTACHE_ROOT_PATH}
  }
}

akka{
  http{
    server{
      interface = "0.0.0.0"
      interface = ${?HTTP_SERVER_INTERFACE}

      port      = 80
      port      = ${?HTTP_SERVER_PORT}
    }
  }
}

akka {
  actor {
    provider = "cluster"

    debug {
      receive = on // log all messages sent to an actor if that actors receive method is a LoggingReceive
      autoreceive = off // log all special messages like Kill, PoisonPill etc sent to all actors
      lifecycle = off // log all actor lifecycle events of all actors
      fsm = off // enable logging of all events, transitioffs and timers of FSM Actors that extend LoggingFSM
      event-stream = off // enable logging of subscriptions (subscribe/unsubscribe) on the ActorSystem.eventStream
    }

    # Set this to on to enable serialization-bindings define in
    # additional-serialization-bindings. Those are by default not included
    # for backwards compatibility reasons. They are enabled by default if
    # akka.remote.artery.enabled=on.
    enable-additional-serialization-bindings = on

    allow-java-serialization = off

    serializers {
      proto = "akka.remote.serialization.ProtobufSerializer"
      chill  = "com.twitter.chill.akka.AkkaSerializer"
    }

    serialization-bindings {
      "org.softnetwork.akka.message.package$Command" = chill
      "org.softnetwork.akka.message.package$CommandResult" = chill
      "org.softnetwork.akka.message.package$Event" = chill
      "org.softnetwork.akka.model.package$State" = chill

      "org.softnetwork.akka.model.package$Timestamped" = proto
      "org.softnetwork.akka.message.package$ProtobufEvent" = proto # protobuf events
      "org.softnetwork.akka.model.package$ProtobufDomainObject" = proto # protobuf domain objects

      "org.softnetwork.akka.message.package$CborEvent" = jackson-cbor # cbor events
      "org.softnetwork.akka.model.package$CborDomainObject" = jackson-cbor # cbor domain objects
    }

  }

  persistence {
    journal {
      plugin = "jdbc-journal"
      // Enable the line below to automatically start the journal when the actorsystem is started
      // auto-start-journals = ["jdbc-journal"]
    }
    snapshot-store {
      plugin = "jdbc-snapshot-store"
      // Enable the line below to automatically start the snapshot-store when the actorsystem is started
      // auto-start-snapshot-stores = ["jdbc-snapshot-store"]
    }
    read-journal {
      plugin = "jdbc-read-journal"
    }

  }

  # By default, just bind to loopback and do not allow access from the network
  remote.artery {
    canonical.port = 0
    canonical.hostname = 127.0.0.1
  }

  cluster {
    seed-nodes = []
    roles = []
  }

}

akka-persistence-jdbc {
  shared-databases {
    slick = ${slick}
  }
}

jdbc-journal {
  use-shared-db = "slick"
}

# the akka-persistence-snapshot-store in use
jdbc-snapshot-store {
  use-shared-db = "slick"
}

# the akka-persistence-query provider in use
jdbc-read-journal {

  refresh-interval = "100ms"
  max-buffer-size = "500"

  use-shared-db = "slick"
}

slick {
  profile = "slick.jdbc.PostgresProfile$"
  db {
    url = "jdbc:postgresql://127.0.0.1:5432/mosaeat?reWriteBatchedInserts=true"
    url = ${?POSTGRES_DB_URL}
    user = "mosaeat"
    user = ${?POSTGRES_DB_USER}
    password = "changeit"
    password = ${?POSTGRES_DB_PASSWORD}
    driver = "org.postgresql.Driver"
    numThreads = 100
    maxConnections = 100
    minConnections = 1
    idleTimeout = 10000 //10 seconds
  }
}
